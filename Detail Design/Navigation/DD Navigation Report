# CIRCE Autonomous Navigation Subsystem Design

## Function of the Subsystem

The navigation subsystem for CIRCE serves as the brain of its autonomous movement. Its 
primary function is to determine the robot’s position and orientation in space, plan safe and 
efficient paths toward specified goals, and execute motion commands to reach those destinations 
while avoiding obstacles. This system integrates real-time localization, environment mapping, 
sensor fusion, and precise motor control, enabling CIRCE to autonomously explore and navigate 
a maximum distance of up to 100 yards from its start location. 

---

## Specifications and Constraints

● CirceBot shall carry up to 100 yards (approximately 10 lbs.) of Ethernet cable and report 
error codes via self diagnosis.  
○ ANSI/TIA-568.2-D: This standard specifies the maximum allowable length for 
twisted-pair Ethernet cables in standard networking applications. The maximum 
length is defined as 109 yards (328 feet or approximately 100 meters), beyond 
which signal attenuation, latency, and packet loss can degrade network 
performance. To extend connectivity beyond this limit, additional hardware such 
as repeaters, switches, or fiber optic solutions are required. For this project it is 
intended to stick with the initial 100 yards.  

● It shall receive Next Position waypoints and navigate to the next waypoint.  
○ The customer, DEVCOM, has specified that navigation shall be conducted using a 
waypoint-to-waypoint system.  

● CirceBot shall transmit real-time data, including current position, current velocity, meters 
of cable left, heading, battery life percentage, and error codes if any occur. The minimum 
speeds that this data should be relayed is 10 Hz. This will utilize sensors and circuiting.  
○ The customer, DEVCOM, has specified the required data to be transmitted and 
displayed for the current operation.  

● CirceBot shall use minor obstacle avoidance to avoid collisions. This will allow the robot 
to go around obstacles and avoid any collisions that could possibly damage the system.  
○ ANSI/RIA R15.08: This standard establishes safety requirements for autonomous 
mobile robots (AMRs), including obstacle detection and avoidance. It defines 
acceptable sensor technologies, response times, and stopping distances to ensure 
safe operation in dynamic environments.  

**Constraints include:**  

● Limited computational and RAM resources (balanced via ROS optimization)  
○ This is a byproduct of the hardware being used, but balanced via the software.  

● Sensor update timing and synchronization  
○ As with any system utilizing sensor integration we must take into account refresh 
rates and synchronicity of data.  

● Maintaining odometry accuracy over time and distance  
○ This is caused due to the lack of reliability of most coordinate planes as a single 
source, but is balanced by using three different coordinate planes in conjunction to 
reduce drift and increase accuracy.  

---

## Overview of Proposed Solution

The system uses the following integrated components:  

● Raspberry Pi 4: Executes SLAM, global positioning, path planning, and environmental 
mapping using ROS. It collects sensor data from the LiDAR and RealSense camera to 
build a real-time occupancy map and fuses this with inertial and odometric feedback.  

● ATMega 2560: Processes velocity commands from the Pi, translates them to motor 
driver signals, and uses encoder feedback with Hall effect sensors to maintain precise 
wheel speed and direction.  

● SLAM and Path Planning: RTAB-Map (Real-Time Appearance-Based Mapping) 
provides a ROS-based SLAM solution. Navigation is guided using A* or Dijkstra's 
algorithm on a dynamic occupancy grid.  

● Coordinate System Integration:  
○ ECI (Earth-Centered Inertial): Though typically used in space applications, 
CIRCE utilizes ECI frames to provide a time-consistent reference for long-term 
drift correction and synchronization with external positioning systems.  

○ ECEF (Earth-Centered Earth-Fixed): Maps real-world 3D positions relative to 
the Earth’s surface. Useful when interfacing CIRCE with global positioning 
systems.  

○ Local Cartesian Frame: CIRCE builds a local 2D/3D occupancy map in 
Cartesian space where all obstacle detection and path planning take place. This is 
the robot's immediate operational frame.  

These three coordinate systems are converted via transformation matrices inside the Pi’s software 
stack (e.g., using ROS tf package). ECI provides time-invariant inertial anchoring, ECEF 
supports geographic referencing, and the Cartesian map offers immediate spatial 
decision-making.  

● Wheel Encoders with Hall Sensors: Each DC motor is equipped with a 
Hall-effect-based quadrature encoder. These generate two out-of-phase digital signals, 
interpreted by the ATMega to determine both speed and direction of each wheel. 
Combined with the IMU, they provide dead-reckoning odometry, crucial for short-term 
localization and motor control feedback.  

---

## Interface with Other Subsystems

● Power System: Supplies 5V and 12V to Raspberry Pi, ATMega, sensors, and motors. A 
regulated buck converter ensures voltage consistency.  

● Communication Bus: A UART link allows the Raspberry Pi to send high-level velocity 
commands to the ATMega.  

● Sensor Bus: I2C/UART interfaces connect the sensors to the Raspberry Pi, while GPIO 
handles interrupts from Hall sensors to the ATMega.  

● Motor Controls: UART over serial allows for the ATMega to send linear and angular 
velocity commands to the motor controller for precise movement.  

---

## Buildable Schematic

● ATMega Code:  

● Raspberry Pi 4 Code:  

● Slam Launch File:  

---

## Bill of Materials

| Component            | Quantity | Notes                      |
|----------------------|----------|----------------------------|
| Intel RealSense D456 | 1        | Depth and IMU sensor       |
| RPLIDAR A1           | 1        | 360° obstacle detection     |

---

## Analysis

This navigation system combines reactive real-time obstacle avoidance with strategic global 
planning through ROS SLAM integration. The use of Hall sensors in the encoders ensures robust 
motor feedback, allowing PID tuning and precise low-level control even during unexpected drift 
or slippage.  

The fusion of multiple coordinate systems (ECI, ECEF, and local Cartesian) makes CIRCE a 
future-ready platform. While ECI may seem excessive for a ground vehicle, its inclusion offers a 
highly consistent inertial reference frame, essential when odometry and IMU data alone may 
drift over time. This also opens the door for planetary or extreme-environment applications 
where GPS is unreliable.  

By encapsulating all navigation tasks into a well-layered system—with the Pi handling 
computation and planning, and the ATMega managing precision control—CIRCE is engineered 
for modular upgrades, accurate movement, and consistent long-range exploration.  

---

## References

[1] “Wiki,” ros.org, http://wiki.ros.org/navigation (accessed Apr. 9, 2025).  
[2] “Intel RealSense documentation - get started,” Intel® RealSenseTM Developer Documentation, https://dev.intelrealsense.com/ (accessed Apr. 9, 2025).  
[3] Slamtec, “Slamtec/rplidar_ros,” GitHub, https://github.com/Slamtec/rplidar_ros (accessed Apr. 9, 2025).  
[4] Introlab, “Introlab/RTABMAP_ROS: RTAB-map’s ROS package.,” GitHub, https://github.com/introlab/rtabmap_ros (accessed Apr. 9, 2025).  
[5] Ti, https://www.ti.com/lit/an/sbaa449b/sbaa449b.pdf?ts=1727349550861&ref_url=https%253A%252F%252Fwww.google.com%252F (accessed Apr. 9, 2025).  
[6] NASA, https://ntrs.nasa.gov/api/citations/19980228191/downloads/19980228191.pdf (accessed Apr. 9, 2025).  


